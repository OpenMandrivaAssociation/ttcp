--- ttcp-1.12/ttcp.c.old	2005-02-22 14:30:52.000000000 +0100
+++ ttcp-1.12/ttcp.c	2005-02-22 14:25:43.000000000 +0100
@@ -32,6 +32,32 @@
  *	use getopt(3) for option processing, add -f and -T options.
  *	SGI IRIX 3.3 and 4.0 releases don't need #define SYSV.
  *
+ * Modified Jul 2001 by Pekka Savola <pekkas@netcore.fi>
+ *	implement full IPv6 support (server uses ipv6 mapped addresses for ipv4)
+ *	fix a few warnings (from *BSD)
+ *	fix loads of more warnings
+ *	use snprintf with a few fixed-sized buffers, fix format strings 
+ *
+ * Modified Oct 2001 by Jaakko Kyrö <jkyro@cs.helsinki.fi>
+ *      Added -I option to specify network interface
+ *
+ * Modified Oct 2002 by Pekka Savola <pekkas@netcore.fi>
+ *      fix port selection for >2^15
+ *	clean out _cray, sysv etc. cruft, always build with IPv6
+ *      major cleanups, should be a bit more readable now
+ *
+ * Modified Oct 2002 by Stig Venaas <venaas@uninett.no>
+ *      added multicast support
+ *      added -w option to specify microsecond delay between each write
+ *      further cleanups
+ * 
+ * Modified Oct 2002 by Pekka Savola <pekkas@netcore.fi>
+ *      made one variable 'static' to fix compilation on Solaris from <sleinen@switch.ch>
+ *
+ * Modified Aug 2004 by Stig Venaas <venaas@uninett.no>
+ *      Binding to group address when receiving multicast
+ *      Added SO_REUSEADDR so multiple processes can listen to same port
+ *
  * Distribution Status -
  *      Public Domain.  Distribution Unlimited.
  */
@@ -39,39 +65,30 @@
 static char RCSid[] = "ttcp.c $Revision: 1.12 $";
 #endif
 
-#define BSD43
-/* #define BSD42 */
-/* #define BSD41a */
-/* #define SYSV */	/* required on SGI IRIX releases before 3.3 */
-
-#include <stdio.h>
-#include <signal.h>
-#include <ctype.h>
-#include <errno.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <sys/time.h>		/* struct timeval */
+#include <sys/resource.h>
+#include <net/if.h>
 #include <netinet/in.h>
 #include <netinet/tcp.h>
 #include <arpa/inet.h>
-#include <netdb.h>
-#include <sys/time.h>		/* struct timeval */
-
-#if defined(SYSV)
-#include <sys/times.h>
-#include <sys/param.h>
-struct rusage {
-    struct timeval ru_utime, ru_stime;
-};
-#define RUSAGE_SELF 0
-#else
-#include <sys/resource.h>
-#endif
 
-struct sockaddr_in sinme;
-struct sockaddr_in sinhim;
-struct sockaddr_in frominet;
+#include <ctype.h>
+#include <errno.h>
+#include <netdb.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+struct sockaddr_storage frominet;
+struct addrinfo hints, *res, *res0;
+struct ipv6_mreq mreq6;
+struct ip_mreq mreq;
 
-int domain, fromlen;
+size_t fromlen;
 int fd;				/* fd of network socket */
 
 int buflen = 8 * 1024;		/* length of buffer */
@@ -84,7 +101,7 @@
 int udp = 0;			/* 0 = tcp, !0 = udp */
 int options = 0;		/* socket options */
 int one = 1;                    /* for 4.3 BSD style setsockopt() */
-short port = 5001;		/* TCP port number */
+char *port = "5001";		/* TCP/UDP port number */
 char *host;			/* ptr to name of host */
 int trans;			/* 0=receive, !0=transmit mode */
 int sinkmode = 0;		/* 0=normal I/O, !0=sink/source mode */
@@ -97,33 +114,38 @@
 				 *  m = megabits, M = megabytes, 
 				 *  g = gigabits, G = gigabytes */
 int touchdata = 0;		/* access data after reading */
+static long wait = 0;		/* usecs to wait between each write */
+int af =  AF_UNSPEC;		/* Address family to be determined */
 
-struct hostent *addr;
 extern int errno;
 extern int optind;
 extern char *optarg;
 
 char Usage[] = "\
 Usage: ttcp -t [-options] host [ < in ]\n\
-       ttcp -r [-options > out]\n\
+       ttcp -r [-options] [multicast-group][ > out]\n\
 Common options:\n\
+	-4	use IPv4\n\
+	-6	use IPv6\n\
 	-l ##	length of bufs read from or written to network (default 8192)\n\
 	-u	use UDP instead of TCP\n\
 	-p ##	port number to send to or listen at (default 5001)\n\
 	-s	-t: source a pattern to network\n\
 		-r: sink (discard) all data from network\n\
-	-A	align the start of buffers to this modulus (default 16384)\n\
-	-O	start buffers at this offset from the modulus (default 0)\n\
+	-A ##	align the start of buffers to this modulus (default 16384)\n\
+	-O ##	start buffers at this offset from the modulus (default 0)\n\
 	-v	verbose: print more statistics\n\
 	-d	set SO_DEBUG socket option\n\
 	-b ##	set socket buffer size (if supported)\n\
 	-f X	format for rate: k,K = kilo{bit,byte}; m,M = mega; g,G = giga\n\
 Options specific to -t:\n\
-	-n##	number of source bufs written to network (default 2048)\n\
+	-n ##	number of source bufs written to network (default 2048)\n\
 	-D	don't buffer TCP writes (sets TCP_NODELAY socket option)\n\
+	-w ##	number of microseconds to wait between each write\n\
 Options specific to -r:\n\
 	-B	for -s, only output full blocks as specified by -l (for TAR)\n\
 	-T	\"touch\": access each byte as it's read\n\
+        -I if   Specify the network interface (e.g. eth0) to use\n\
 ";	
 
 char stats[128];
@@ -133,7 +155,7 @@
 
 void err();
 void mes();
-int pattern();
+void pattern();
 void prep_timer();
 double read_timer();
 int Nread();
@@ -147,18 +169,26 @@
 {
 }
 
-main(argc,argv)
-int argc;
-char **argv;
+int
+main(int argc, char **argv)
 {
-	unsigned long addr_tmp;
+	char *device = NULL;
+	int maf = 0;		/* Address family if multicast, else 0 */
 	int c;
 
 	if (argc < 2) goto usage;
 
-	while ((c = getopt(argc, argv, "drstuvBDTb:f:l:n:p:A:O:")) != -1) {
+	while ((c = getopt(argc, argv, "46drstuvBDTb:f:l:n:p:w:A:O:I:")) != -1) {
 		switch (c) {
-
+		case '4':
+			af = AF_INET;
+			break;
+		case '6':
+			af = AF_INET6;
+			break;
+		case 'I':
+			device = optarg;
+			break;
 		case 'B':
 			b_flag = 1;
 			break;
@@ -189,7 +219,7 @@
 			sinkmode = !sinkmode;
 			break;
 		case 'p':
-			port = atoi(optarg);
+			port = optarg;
 			break;
 		case 'u':
 			udp = 1;
@@ -197,6 +227,9 @@
 		case 'v':
 			verbose = 1;
 			break;
+		case 'w':
+			wait = strtol(optarg, (char **)NULL, 10);
+			break;
 		case 'A':
 			bufalign = atoi(optarg);
 			break;
@@ -217,76 +250,166 @@
 		case 'T':
 			touchdata = 1;
 			break;
-
 		default:
 			goto usage;
 		}
 	}
-	if(trans)  {
+
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family = af;
+	hints.ai_socktype = udp ? SOCK_DGRAM : SOCK_STREAM;
+
+	if (trans) {
 		/* xmitr */
 		if (optind == argc)
 			goto usage;
-		bzero((char *)&sinhim, sizeof(sinhim));
 		host = argv[optind];
-		if (atoi(host) > 0 )  {
-			/* Numeric */
-			sinhim.sin_family = AF_INET;
-#if defined(cray)
-			addr_tmp = inet_addr(host);
-			sinhim.sin_addr = addr_tmp;
-#else
-			sinhim.sin_addr.s_addr = inet_addr(host);
-#endif
-		} else {
-			if ((addr=gethostbyname(host)) == NULL)
-				err("bad hostname");
-			sinhim.sin_family = addr->h_addrtype;
-			bcopy(addr->h_addr,(char*)&addr_tmp, addr->h_length);
-#if defined(cray)
-			sinhim.sin_addr = addr_tmp;
-#else
-			sinhim.sin_addr.s_addr = addr_tmp;
-#endif /* cray */
+		if (getaddrinfo(host, port, &hints, &res) != 0) {	
+			fprintf(stderr, "can't resolve %s port %s\n", host, port);
+			exit(1);
+		}
+
+		if (udp) {
+			/* Check if multicast address */
+			if (res->ai_family == AF_INET6) {
+                               if (IN6_IS_ADDR_MULTICAST(&((struct sockaddr_in6 *)
+                                                           res->ai_addr)->sin6_addr)) {
+                                       maf = AF_INET6;
+                               }
+			} else if (res->ai_family == AF_INET) {
+                               if (IN_MULTICAST(ntohl(((struct sockaddr_in *)
+                                                 res->ai_addr)->sin_addr.s_addr))) {
+                                       maf = AF_INET;
+                               }
+			}
 		}
-		sinhim.sin_port = htons(port);
-		sinme.sin_port = 0;		/* free choice */
 	} else {
 		/* rcvr */
-		sinme.sin_port =  htons(port);
-	}
+		if (udp && optind < argc) {
+			if (inet_pton(AF_INET, argv[optind], &mreq.imr_multiaddr) <= 0) {
+                               if (inet_pton(AF_INET6, argv[optind], &mreq6.ipv6mr_multiaddr) <= 0) {
+                                       fprintf(stderr, "%s is not a multicast address\n", argv[optind]);
+                                       exit(1);
+                               }
+                               /* IPv6 */
+                               if (!IN6_IS_ADDR_MULTICAST(&mreq6.ipv6mr_multiaddr)) {
+                                       fprintf(stderr, "%s is not a multicast address\n", argv[optind]);
+                                       exit(1);
+                               }
+                               hints.ai_family = AF_INET6;
+                               maf = AF_INET6;
+                               mreq6.ipv6mr_interface = 0;
+			} else {
+                               /* IPv4 */
+                               if (!IN_MULTICAST(ntohl(mreq.imr_multiaddr.s_addr))) {
+                                       fprintf(stderr, "%s is not a multicast address\n", argv[optind]);
+                                       exit(1);
+                               }
+                               hints.ai_family = AF_INET;
+                               maf = AF_INET;
+                               mreq.imr_interface.s_addr = INADDR_ANY;
+			}
+			host = argv[optind];
+			hints.ai_flags = AI_NUMERICHOST;
+		} else {
+			host = NULL;
+			hints.ai_flags = AI_PASSIVE;
+		}
+		if (getaddrinfo(host, port, &hints, &res0) != 0) {
+			fprintf(stderr, "can't resolve %s\n", port);
+			exit(1);
+		}
 
+		/* if libc supports ipv6 but kernel doesn't: get the first one */
+		/* XXX: uses ipv6 mapped addresses as generic methods aren't there yet */
+		for (res = res0; res; res = res->ai_next) {
+			if ((fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) > 0)
+				break;
+		}
+	}
 
 	if (udp && buflen < 5) {
 	    buflen = 5;		/* send more than the sentinel size */
 	}
 
-	if ( (buf = (char *)malloc(buflen+bufalign)) == (char *)NULL)
+	if ((buf = (char *)malloc(buflen+bufalign)) == (char *)NULL)
 		err("malloc");
 	if (bufalign != 0)
 		buf +=(bufalign - ((int)buf % bufalign) + bufoffset) % bufalign;
 
 	if (trans) {
-	    fprintf(stdout,
-	    "ttcp-t: buflen=%d, nbuf=%d, align=%d/%d, port=%d",
-		buflen, nbuf, bufalign, bufoffset, port);
- 	    if (sockbufsize)
- 		fprintf(stdout, ", sockbufsize=%d", sockbufsize);
- 	    fprintf(stdout, "  %s  -> %s\n", udp?"udp":"tcp", host);
+		fprintf(stderr, "ttcp-t: buflen=%d, nbuf=%d, align=%d/%d, port=%s",
+			buflen, nbuf, bufalign, bufoffset, port);
+		if (sockbufsize)
+ 			fprintf(stderr, ", sockbufsize=%d", sockbufsize);
+		fprintf(stderr, "  %s  -> %s\n", udp ? "udp" : "tcp", host);
 	} else {
-	    fprintf(stdout,
- 	    "ttcp-r: buflen=%d, nbuf=%d, align=%d/%d, port=%d",
- 		buflen, nbuf, bufalign, bufoffset, port);
- 	    if (sockbufsize)
- 		fprintf(stdout, ", sockbufsize=%d", sockbufsize);
- 	    fprintf(stdout, "  %s\n", udp?"udp":"tcp");
+		fprintf(stderr, "ttcp-r: buflen=%d, nbuf=%d, align=%d/%d, port=%s",
+ 			buflen, nbuf, bufalign, bufoffset, port);
+ 		if (sockbufsize)
+			fprintf(stderr, ", sockbufsize=%d", sockbufsize);
+		fprintf(stderr, "  %s\n", udp ? "udp" : "tcp");
+	}
+
+	if (!fd) {
+		if ((fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) < 0)
+			err("socket");
+	}
+	
+	if (device) {
+		if (maf == AF_INET) {
+			/* Not supported, using struct ip_mreq we need to find IP
+			 * address of interface, at least linux has ip_mreqn which
+			 * uses interface index
+			 */
+		} else if (maf == AF_INET6) {
+			if ((mreq6.ipv6mr_interface = if_nametoindex(device)) == 0) {
+				err("unknown device");
+			}
+		} else {
+			struct ifreq ifr;
+			memset(&ifr, 0, sizeof(ifr));
+			strncpy(ifr.ifr_name, device, IFNAMSIZ-1);
+			ifr.ifr_name[IFNAMSIZ-1] = '\0';
+#ifdef SO_BINDTODEVICE
+			if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr,sizeof(ifr)) == -1) {
+				err("bind-to-device");
+			}
+#else
+			fprintf(stderr, "ttcp: warning: setting device not supported!\n");
+#endif
+		}
 	}
-
-	if ((fd = socket(AF_INET, udp?SOCK_DGRAM:SOCK_STREAM, 0)) < 0)
-		err("socket");
 	mes("socket");
 
-	if (bind(fd, &sinme, sizeof(sinme)) < 0)
-		err("bind");
+	if (maf == AF_INET) {
+		if (trans) {
+			/* set hop limit, default 1. Should perhaps be an option */
+			int ttl=30;
+			setsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&ttl, sizeof(ttl));
+		} else {
+			/* join the group */
+			setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
+		}
+	} else if (maf == AF_INET6) {
+		if (trans) {
+			/* set hop limit, default 1. Should perhaps be an option */
+			int hops=30;
+			setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, (char *)&hops, sizeof(hops));
+		} else {
+			/* join the group */
+			setsockopt(fd, IPPROTO_IPV6, IPV6_JOIN_GROUP, &mreq6, sizeof(mreq6));
+		}
+	}
+
+	if (!trans) {
+#ifdef SO_REUSEADDR		
+		if (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == -1)
+			err("reuseaddr");
+#endif
+		if (bind(fd, res->ai_addr, res->ai_addrlen) < 0)
+			err("bind");
+	}
 
 #if defined(SO_SNDBUF) || defined(SO_RCVBUF)
 	if (sockbufsize) {
@@ -309,55 +432,46 @@
 	    if (trans) {
 		/* We are the client if transmitting */
 		if (options)  {
-#if defined(BSD42)
-			if( setsockopt(fd, SOL_SOCKET, options, 0, 0) < 0)
-#else /* BSD43 */
-			if( setsockopt(fd, SOL_SOCKET, options, &one, sizeof(one)) < 0)
-#endif
+			if (setsockopt(fd, SOL_SOCKET, options, &one, sizeof(one)) < 0)
 				err("setsockopt");
 		}
 #ifdef TCP_NODELAY
 		if (nodelay) {
 			struct protoent *p;
 			p = getprotobyname("tcp");
-			if( p && setsockopt(fd, p->p_proto, TCP_NODELAY, 
+			if (p && setsockopt(fd, p->p_proto, TCP_NODELAY, 
 			    &one, sizeof(one)) < 0)
 				err("setsockopt: nodelay");
 			mes("nodelay");
 		}
 #endif
-		if(connect(fd, &sinhim, sizeof(sinhim) ) < 0)
+		if (connect(fd, res->ai_addr, res->ai_addrlen) < 0)
 			err("connect");
 		mes("connect");
 	    } else {
 		/* otherwise, we are the server and 
 	         * should listen for the connections
 	         */
-#if defined(ultrix) || defined(sgi)
-		listen(fd,1);   /* workaround for alleged u4.2 bug */
-#else
-		listen(fd,0);   /* allow a queue of 0 */
-#endif
-		if(options)  {
-#if defined(BSD42)
-			if( setsockopt(fd, SOL_SOCKET, options, 0, 0) < 0)
-#else /* BSD43 */
-			if( setsockopt(fd, SOL_SOCKET, options, &one, sizeof(one)) < 0)
-#endif
+		listen(fd, 0);   /* allow a queue of 0 */
+		if (options) {
+			if (setsockopt(fd, SOL_SOCKET, options, &one, sizeof(one)) < 0)
 				err("setsockopt");
 		}
 		fromlen = sizeof(frominet);
-		domain = AF_INET;
-		if((fd=accept(fd, &frominet, &fromlen) ) < 0)
+
+		if ((fd = accept(fd, (struct sockaddr*)&frominet, &fromlen)) < 0)
 			err("accept");
-		{ struct sockaddr_in peer;
-		  int peerlen = sizeof(peer);
-		  if (getpeername(fd, (struct sockaddr_in *) &peer, 
-				&peerlen) < 0) {
+		{ 
+		  struct sockaddr_storage peer;
+		  char addr_buf[NI_MAXHOST];
+		  size_t peerlen = sizeof(peer);
+		  
+		  if (getpeername(fd, (struct sockaddr*) &peer, &peerlen) < 0)
 			err("getpeername");
-		  }
-		  fprintf(stderr,"ttcp-r: accept from %s\n", 
-			inet_ntoa(peer.sin_addr));
+		  if (getnameinfo((struct sockaddr *) &peer, res->ai_addrlen, addr_buf, 
+		  		sizeof(addr_buf), NULL, 0, NI_NUMERICHOST))
+		  	err("getnameinfo");
+		  fprintf(stderr,"ttcp-r: accept from %s\n", addr_buf);
 		}
 	    }
 	}
@@ -365,136 +479,136 @@
 	errno = 0;
 	if (sinkmode) {      
 		register int cnt;
-		if (trans)  {
-			pattern( buf, buflen );
-			if(udp)  (void)Nwrite( fd, buf, 4 ); /* rcvr start */
-			while (nbuf-- && Nwrite(fd,buf,buflen) == buflen)
+		if (trans) {
+			pattern(buf, buflen);
+			if (udp)
+				(void)Nwrite(fd, buf, 4); /* rcvr start */
+			while (nbuf-- && Nwrite(fd, buf, buflen) == buflen)
 				nbytes += buflen;
-			if(udp)  (void)Nwrite( fd, buf, 4 ); /* rcvr end */
+			if (udp)
+				(void)Nwrite(fd, buf, 4); /* rcvr end */
 		} else {
 			if (udp) {
-			    while ((cnt=Nread(fd,buf,buflen)) > 0)  {
+			    while ((cnt = Nread(fd, buf, buflen)) > 0)  {
 				    static int going = 0;
-				    if( cnt <= 4 )  {
-					    if( going )
+				    if (cnt <= 4) {
+					    if (going)
 						    break;	/* "EOF" */
 					    going = 1;
 					    prep_timer();
-				    } else {
+				    } else
 					    nbytes += cnt;
-				    }
 			    }
 			} else {
-			    while ((cnt=Nread(fd,buf,buflen)) > 0)  {
+			    while ((cnt = Nread(fd, buf, buflen)) > 0)  {
 				    nbytes += cnt;
 			    }
 			}
 		}
 	} else {
 		register int cnt;
-		if (trans)  {
-			while((cnt=read(0,buf,buflen)) > 0 &&
-			    Nwrite(fd,buf,cnt) == cnt)
+		if (trans) {
+			while ((cnt = read(0, buf, buflen)) > 0 &&
+			    Nwrite(fd, buf, cnt) == cnt)
 				nbytes += cnt;
-		}  else  {
-			while((cnt=Nread(fd,buf,buflen)) > 0 &&
-			    write(1,buf,cnt) == cnt)
+		} else {
+			while ((cnt = Nread(fd, buf, buflen)) > 0 &&
+			    write(1, buf, cnt) == cnt)
 				nbytes += cnt;
 		}
 	}
-	if(errno) err("IO");
-	(void)read_timer(stats,sizeof(stats));
-	if(udp&&trans)  {
-		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
-		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
-		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
-		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
-	}
-	if( cput <= 0.0 )  cput = 0.001;
-	if( realt <= 0.0 )  realt = 0.001;
-	fprintf(stdout,
+	if (errno)
+		err("IO");
+	(void)read_timer(stats, sizeof(stats));
+	if (udp && trans)  {
+		(void)Nwrite(fd, buf, 4); /* rcvr end */
+		(void)Nwrite(fd, buf, 4); /* rcvr end */
+		(void)Nwrite(fd, buf, 4); /* rcvr end */
+		(void)Nwrite(fd, buf, 4); /* rcvr end */
+	}
+	if (cput <= 0.0)
+		cput = 0.001;
+	if (realt <= 0.0)
+		realt = 0.001;
+	fprintf(stderr,
 		"ttcp%s: %.0f bytes in %.2f real seconds = %s/sec +++\n",
-		trans?"-t":"-r",
+		trans ? "-t" : "-r",
 		nbytes, realt, outfmt(nbytes/realt));
 	if (verbose) {
-	    fprintf(stdout,
+	    fprintf(stderr,
 		"ttcp%s: %.0f bytes in %.2f CPU seconds = %s/cpu sec\n",
-		trans?"-t":"-r",
+		trans ? "-t" : "-r",
 		nbytes, cput, outfmt(nbytes/cput));
 	}
-	fprintf(stdout,
-		"ttcp%s: %d I/O calls, msec/call = %.2f, calls/sec = %.2f\n",
-		trans?"-t":"-r",
+	fprintf(stderr,
+		"ttcp%s: %ld I/O calls, msec/call = %.2f, calls/sec = %.2f\n",
+		trans ? "-t" : "-r",
 		numCalls,
 		1024.0 * realt/((double)numCalls),
 		((double)numCalls)/realt);
-	fprintf(stdout,"ttcp%s: %s\n", trans?"-t":"-r", stats);
+	fprintf(stderr, "ttcp%s: %s\n", trans ? "-t" : "-r", stats);
 	if (verbose) {
-	    fprintf(stdout,
-		"ttcp%s: buffer address %#x\n",
-		trans?"-t":"-r",
+	    fprintf(stderr,
+		"ttcp%s: buffer address %p\n",
+		trans ? "-t" : "-r",
 		buf);
 	}
 	exit(0);
 
 usage:
-	fprintf(stderr,Usage);
+	fprintf(stderr, "%s", Usage);
 	exit(1);
 }
 
 void
-err(s)
-char *s;
+err(char *s)
 {
-	fprintf(stderr,"ttcp%s: ", trans?"-t":"-r");
+	fprintf(stderr, "ttcp%s: ", trans ? "-t" : "-r");
 	perror(s);
-	fprintf(stderr,"errno=%d\n",errno);
+	fprintf(stderr, "errno=%d\n", errno);
 	exit(1);
 }
 
 void
-mes(s)
-char *s;
+mes(char *s)
 {
-	fprintf(stderr,"ttcp%s: %s\n", trans?"-t":"-r", s);
+	fprintf(stderr, "ttcp%s: %s\n", trans ? "-t" : "-r", s);
 }
 
-pattern( cp, cnt )
-register char *cp;
-register int cnt;
+void
+pattern(register char *cp, register int cnt)
 {
 	register char c;
 	c = 0;
-	while( cnt-- > 0 )  {
-		while( !isprint((c&0x7F)) )  c++;
+	while (cnt-- > 0) {
+		while (!isprint((c&0x7F))) c++;
 		*cp++ = (c++&0x7F);
 	}
 }
 
 char *
-outfmt(b)
-double b;
+outfmt(double b)
 {
     static char obuf[50];
     switch (fmt) {
 	case 'G':
-	    sprintf(obuf, "%.2f GB", b / 1024.0 / 1024.0 / 1024.0);
+	    snprintf(obuf, sizeof(obuf), "%.2f GB", b / 1024.0 / 1024.0 / 1024.0);
 	    break;
 	default:
 	case 'K':
-	    sprintf(obuf, "%.2f KB", b / 1024.0);
+	    snprintf(obuf, sizeof(obuf), "%.2f KB", b / 1024.0);
 	    break;
 	case 'M':
-	    sprintf(obuf, "%.2f MB", b / 1024.0 / 1024.0);
+	    snprintf(obuf, sizeof(obuf), "%.2f MB", b / 1024.0 / 1024.0);
 	    break;
 	case 'g':
-	    sprintf(obuf, "%.2f Gbit", b * 8.0 / 1024.0 / 1024.0 / 1024.0);
+	    snprintf(obuf, sizeof(obuf), "%.2f Gbit", b * 8.0 / 1024.0 / 1024.0 / 1024.0);
 	    break;
 	case 'k':
-	    sprintf(obuf, "%.2f Kbit", b * 8.0 / 1024.0);
+	    snprintf(obuf, sizeof(obuf), "%.2f Kbit", b * 8.0 / 1024.0);
 	    break;
 	case 'm':
-	    sprintf(obuf, "%.2f Mbit", b * 8.0 / 1024.0 / 1024.0);
+	    snprintf(obuf, sizeof(obuf), "%.2f Mbit", b * 8.0 / 1024.0 / 1024.0);
 	    break;
     }
     return obuf;
@@ -508,35 +622,6 @@
 static void tvsub();
 static void psecs();
 
-#if defined(SYSV)
-/*ARGSUSED*/
-static
-getrusage(ignored, ru)
-    int ignored;
-    register struct rusage *ru;
-{
-    struct tms buf;
-
-    times(&buf);
-
-    /* Assumption: HZ <= 2147 (LONG_MAX/1000000) */
-    ru->ru_stime.tv_sec  = buf.tms_stime / HZ;
-    ru->ru_stime.tv_usec = ((buf.tms_stime % HZ) * 1000000) / HZ;
-    ru->ru_utime.tv_sec  = buf.tms_utime / HZ;
-    ru->ru_utime.tv_usec = ((buf.tms_utime % HZ) * 1000000) / HZ;
-}
-
-/*ARGSUSED*/
-static 
-gettimeofday(tp, zp)
-    struct timeval *tp;
-    struct timezone *zp;
-{
-    tp->tv_sec = time(0);
-    tp->tv_usec = 0;
-}
-#endif /* SYSV */
-
 /*
  *			P R E P _ T I M E R
  */
@@ -552,8 +637,7 @@
  * 
  */
 double
-read_timer(str,len)
-char *str;
+read_timer(char *str, int len)
 {
 	struct timeval timedol;
 	struct rusage ru1;
@@ -564,26 +648,26 @@
 	getrusage(RUSAGE_SELF, &ru1);
 	gettimeofday(&timedol, (struct timezone *)0);
 	prusage(&ru0, &ru1, &timedol, &time0, line);
-	(void)strncpy( str, line, len );
+	/* XXX: buffer overflow if len > sizeof(line) */
+	(void)strncpy(str, line, len);
 
 	/* Get real time */
-	tvsub( &td, &timedol, &time0 );
+	tvsub(&td, &timedol, &time0);
 	realt = td.tv_sec + ((double)td.tv_usec) / 1000000;
 
 	/* Get CPU time (user+sys) */
-	tvadd( &tend, &ru1.ru_utime, &ru1.ru_stime );
-	tvadd( &tstart, &ru0.ru_utime, &ru0.ru_stime );
-	tvsub( &td, &tend, &tstart );
+	tvadd(&tend, &ru1.ru_utime, &ru1.ru_stime);
+	tvadd(&tstart, &ru0.ru_utime, &ru0.ru_stime);
+	tvsub(&td, &tend, &tstart);
 	cput = td.tv_sec + ((double)td.tv_usec) / 1000000;
-	if( cput < 0.00001 )  cput = 0.00001;
-	return( cput );
+	if (cput < 0.00001)
+		cput = 0.00001;
+	return(cput);
 }
 
 static void
-prusage(r0, r1, e, b, outp)
-	register struct rusage *r0, *r1;
-	struct timeval *e, *b;
-	char *outp;
+prusage(register struct rusage *r0, register struct rusage *r1,
+	struct timeval *e, struct timeval *b, char *outp)
 {
 	struct timeval tdiff;
 	register time_t t;
@@ -595,32 +679,24 @@
 	    (r1->ru_utime.tv_usec-r0->ru_utime.tv_usec)/10000+
 	    (r1->ru_stime.tv_sec-r0->ru_stime.tv_sec)*100+
 	    (r1->ru_stime.tv_usec-r0->ru_stime.tv_usec)/10000;
-	ms =  (e->tv_sec-b->tv_sec)*100 + (e->tv_usec-b->tv_usec)/10000;
+	ms = (e->tv_sec-b->tv_sec)*100 + (e->tv_usec-b->tv_usec)/10000;
 
 #define END(x)	{while(*x) x++;}
-#if defined(SYSV)
-	cp = "%Uuser %Ssys %Ereal %P";
-#else
-#if defined(sgi)		/* IRIX 3.3 will show 0 for %M,%F,%R,%C */
-	cp = "%Uuser %Ssys %Ereal %P %Mmaxrss %F+%Rpf %Ccsw";
-#else
 	cp = "%Uuser %Ssys %Ereal %P %Xi+%Dd %Mmaxrss %F+%Rpf %Ccsw";
-#endif
-#endif
-	for (; *cp; cp++)  {
+	for (; *cp; cp++) {
 		if (*cp != '%')
 			*outp++ = *cp;
 		else if (cp[1]) switch(*++cp) {
 
 		case 'U':
 			tvsub(&tdiff, &r1->ru_utime, &r0->ru_utime);
-			sprintf(outp,"%d.%01d", tdiff.tv_sec, tdiff.tv_usec/100000);
+			sprintf(outp, "%ld.%01ld", tdiff.tv_sec, tdiff.tv_usec/100000);
 			END(outp);
 			break;
 
 		case 'S':
 			tvsub(&tdiff, &r1->ru_stime, &r0->ru_stime);
-			sprintf(outp,"%d.%01d", tdiff.tv_sec, tdiff.tv_usec/100000);
+			sprintf(outp, "%ld.%01ld", tdiff.tv_sec, tdiff.tv_usec/100000);
 			END(outp);
 			break;
 
@@ -630,75 +706,71 @@
 			break;
 
 		case 'P':
-			sprintf(outp,"%d%%", (int) (t*100 / ((ms ? ms : 1))));
+			sprintf(outp, "%d%%", (int) (t*100 / ((ms ? ms : 1))));
 			END(outp);
 			break;
 
-#if !defined(SYSV)
 		case 'W':
 			i = r1->ru_nswap - r0->ru_nswap;
-			sprintf(outp,"%d", i);
+			sprintf(outp, "%d", i);
 			END(outp);
 			break;
 
 		case 'X':
-			sprintf(outp,"%d", t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t);
+			sprintf(outp, "%ld", t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t);
 			END(outp);
 			break;
 
 		case 'D':
-			sprintf(outp,"%d", t == 0 ? 0 :
+			sprintf(outp, "%ld", t == 0 ? 0 :
 			    (r1->ru_idrss+r1->ru_isrss-(r0->ru_idrss+r0->ru_isrss))/t);
 			END(outp);
 			break;
 
 		case 'K':
-			sprintf(outp,"%d", t == 0 ? 0 :
+			sprintf(outp, "%ld", t == 0 ? 0 :
 			    ((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) -
 			    (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t);
 			END(outp);
 			break;
 
 		case 'M':
-			sprintf(outp,"%d", r1->ru_maxrss/2);
+			sprintf(outp, "%ld", r1->ru_maxrss/2);
 			END(outp);
 			break;
 
 		case 'F':
-			sprintf(outp,"%d", r1->ru_majflt-r0->ru_majflt);
+			sprintf(outp, "%ld", r1->ru_majflt-r0->ru_majflt);
 			END(outp);
 			break;
 
 		case 'R':
-			sprintf(outp,"%d", r1->ru_minflt-r0->ru_minflt);
+			sprintf(outp, "%ld", r1->ru_minflt-r0->ru_minflt);
 			END(outp);
 			break;
 
 		case 'I':
-			sprintf(outp,"%d", r1->ru_inblock-r0->ru_inblock);
+			sprintf(outp, "%ld", r1->ru_inblock-r0->ru_inblock);
 			END(outp);
 			break;
 
 		case 'O':
-			sprintf(outp,"%d", r1->ru_oublock-r0->ru_oublock);
+			sprintf(outp, "%ld", r1->ru_oublock-r0->ru_oublock);
 			END(outp);
 			break;
 		case 'C':
-			sprintf(outp,"%d+%d", r1->ru_nvcsw-r0->ru_nvcsw,
+			sprintf(outp, "%ld+%ld", r1->ru_nvcsw-r0->ru_nvcsw,
 				r1->ru_nivcsw-r0->ru_nivcsw );
 			END(outp);
 			break;
-#endif /* !SYSV */
 		}
 	}
 	*outp = '\0';
 }
 
 static void
-tvadd(tsum, t0, t1)
-	struct timeval *tsum, *t0, *t1;
+tvadd(struct timeval *tsum, struct timeval *t0, struct timeval *t1)
 {
-
 	tsum->tv_sec = t0->tv_sec + t1->tv_sec;
 	tsum->tv_usec = t0->tv_usec + t1->tv_usec;
 	if (tsum->tv_usec > 1000000)
@@ -706,10 +778,8 @@
 }
 
 static void
-tvsub(tdiff, t1, t0)
-	struct timeval *tdiff, *t1, *t0;
+tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0)
 {
-
 	tdiff->tv_sec = t1->tv_sec - t0->tv_sec;
 	tdiff->tv_usec = t1->tv_usec - t0->tv_usec;
 	if (tdiff->tv_usec < 0)
@@ -717,52 +787,48 @@
 }
 
 static void
-psecs(l,cp)
-long l;
-register char *cp;
+psecs(long l, register char *cp)
 {
 	register int i;
 
 	i = l / 3600;
 	if (i) {
-		sprintf(cp,"%d:", i);
+		sprintf(cp, "%d:", i);
 		END(cp);
 		i = l % 3600;
-		sprintf(cp,"%d%d", (i/60) / 10, (i/60) % 10);
+		sprintf(cp, "%d%d", (i/60) / 10, (i/60) % 10);
 		END(cp);
 	} else {
 		i = l;
-		sprintf(cp,"%d", i / 60);
+		sprintf(cp, "%d", i / 60);
 		END(cp);
 	}
 	i %= 60;
 	*cp++ = ':';
-	sprintf(cp,"%d%d", i / 10, i % 10);
+	sprintf(cp, "%d%d", i / 10, i % 10);
 }
 
 /*
  *			N R E A D
  */
-Nread( fd, buf, count )
-int fd;
-void *buf;
-int count;
+int
+Nread(int fd, void *buf, int count)
 {
 	struct sockaddr_in from;
-	int len = sizeof(from);
+	size_t len = sizeof(from);
 	register int cnt;
-	if( udp )  {
-		cnt = recvfrom( fd, buf, count, 0, &from, &len );
+	if (udp) {
+		cnt = recvfrom(fd, buf, count, 0, (struct sockaddr *)&from, &len);
 		numCalls++;
 	} else {
-		if( b_flag )
-			cnt = mread( fd, buf, count );	/* fill buf */
+		if (b_flag)
+			cnt = mread(fd, buf, count);	/* fill buf */
 		else {
-			cnt = read( fd, buf, count );
+			cnt = read(fd, buf, count);
 			numCalls++;
 		}
 		if (touchdata && cnt > 0) {
-			register int c = cnt, sum;
+			register int c = cnt, sum = 0;
 			register char *b = buf;
 			while (c--)
 				sum += *b++;
@@ -774,36 +840,36 @@
 /*
  *			N W R I T E
  */
-Nwrite( fd, buf, count )
-int fd;
-void *buf;
-int count;
+int
+Nwrite(int fd, void *buf, int count)
 {
 	register int cnt;
-	if( udp )  {
+	if (udp) {
 again:
-		cnt = sendto( fd, buf, count, 0, &sinhim, sizeof(sinhim) );
+		cnt = sendto(fd, buf, count, 0, res->ai_addr, res->ai_addrlen);
 		numCalls++;
-		if( cnt<0 && errno == ENOBUFS )  {
+		if (cnt<0 && errno == ENOBUFS)  {
 			delay(18000);
 			errno = 0;
 			goto again;
 		}
 	} else {
-		cnt = write( fd, buf, count );
+		cnt = write(fd, buf, count);
 		numCalls++;
 	}
+	if (wait)
+		delay(wait);
 	return(cnt);
 }
 
 void
-delay(us)
+delay(int us)
 {
 	struct timeval tv;
 
 	tv.tv_sec = 0;
 	tv.tv_usec = us;
-	(void)select( 1, (char *)0, (char *)0, (char *)0, &tv );
+	(void)select(1, NULL, NULL, NULL, &tv);
 }
 
 /*
@@ -816,10 +882,7 @@
  * grouping as it is written with.  Written by Robert S. Miles, BRL.
  */
 int
-mread(fd, bufp, n)
-int fd;
-register char	*bufp;
-unsigned	n;
+mread(int fd, register char *bufp, unsigned int n)
 {
 	register unsigned	count = 0;
 	register int		nread;
